{"ast":null,"code":"var _jsxFileName = \"C:\\\\Desenvolvedor\\\\nextjs\\\\next-firebase-test\\\\pages\\\\blog\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport useSWR from \"swr\";\nimport Link from \"next/link\";\nimport { generatePosts } from \"../../helpers/utils\"; // Only fetch the title and blurb.\n\nvar FirestoreBlogPostsURL = \"https://firestore.googleapis.com/v1/projects/\".concat(process.env.FIREBASE_PROJECT_ID, \"/databases/(default)/documents/posts?mask.fieldPaths=blurb&mask.fieldPaths=title\");\n\nvar fetcher = function fetcher(url) {\n  return fetch(url).then(function (r) {\n    return r.json();\n  });\n};\n\nfunction Blog(props) {\n  _s();\n\n  var _this = this;\n\n  var initialData = props.posts;\n\n  var _useSWR = useSWR(FirestoreBlogPostsURL, fetcher, {\n    initialData: initialData\n  }),\n      data = _useSWR.data; // initialData is already transformed, so only transform refetches\n\n\n  var posts = data.documents ? generatePosts(data) : data;\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 3\n    }\n  }, data && posts.map(function (post) {\n    return __jsx(Link, {\n      href: \"blog/[pid]\",\n      as: \"/blog/\".concat(post.pid),\n      key: \"\".concat(post.pid),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }\n    }, __jsx(\"a\", {\n      style: {\n        boder: \"1px solid\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }\n    }, __jsx(\"h3\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 15\n      }\n    }, post.title, \" \\u2192\"), __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 15\n      }\n    }, post.blurb)));\n  }));\n}\n\n_s(Blog, \"Bw9uScf/xQBWZKhLCWSR33xISM4=\", false, function () {\n  return [useSWR];\n});\n\n_c = Blog;\nexport var __N_SSP = true;\nexport default Blog;\n\nvar _c;\n\n$RefreshReg$(_c, \"Blog\");","map":{"version":3,"sources":["C:/Desenvolvedor/nextjs/next-firebase-test/pages/blog/index.tsx"],"names":["useSWR","Link","generatePosts","FirestoreBlogPostsURL","process","env","FIREBASE_PROJECT_ID","fetcher","url","fetch","then","r","json","Blog","props","initialData","posts","data","documents","map","post","pid","boder","title","blurb"],"mappings":";;;;;AAAA,OAAOA,MAAP,MAAmB,KAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,SAASC,aAAT,QAA8B,qBAA9B,C,CAEA;;AACA,IAAMC,qBAAqB,0DAAmDC,OAAO,CAACC,GAAR,CAAYC,mBAA/D,qFAA3B;;AACA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,GAAD;AAAA,SAASC,KAAK,CAACD,GAAD,CAAL,CAAWE,IAAX,CAAgB,UAACC,CAAD;AAAA,WAAOA,CAAC,CAACC,IAAF,EAAP;AAAA,GAAhB,CAAT;AAAA,CAAhB;;AASA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AAAA;;AACpB,MAAMC,WAAW,GAAGD,KAAK,CAACE,KAA1B;;AADoB,gBAEHhB,MAAM,CAACG,qBAAD,EAAwBI,OAAxB,EAAiC;AAAEQ,IAAAA,WAAW,EAAXA;AAAF,GAAjC,CAFH;AAAA,MAEZE,IAFY,WAEZA,IAFY,EAGpB;;;AACA,MAAMD,KAAK,GAAGC,IAAI,CAACC,SAAL,GAAiBhB,aAAa,CAACe,IAAD,CAA9B,GAAuCA,IAArD;AAEA,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,IAAI,IACHD,KAAK,CAACG,GAAN,CAAU,UAACC,IAAD;AAAA,WACR,MAAC,IAAD;AACE,MAAA,IAAI,EAAC,YADP;AAEE,MAAA,EAAE,kBAAWA,IAAI,CAACC,GAAhB,CAFJ;AAGE,MAAA,GAAG,YAAKD,IAAI,CAACC,GAAV,CAHL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKE;AAAG,MAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE;AAAR,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKF,IAAI,CAACG,KAAV,YADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIH,IAAI,CAACI,KAAT,CAFF,CALF,CADQ;AAAA,GAAV,CAFN,CADD;AAiBA;;GAvBQX,I;UAESb,M;;;KAFTa,I;;AAyBT,eAAeA,IAAf","sourcesContent":["import useSWR from \"swr\";\r\nimport Link from \"next/link\";\r\n\r\nimport { generatePosts } from \"../../helpers/utils\";\r\n\r\n// Only fetch the title and blurb.\r\nconst FirestoreBlogPostsURL = `https://firestore.googleapis.com/v1/projects/${process.env.FIREBASE_PROJECT_ID}/databases/(default)/documents/posts?mask.fieldPaths=blurb&mask.fieldPaths=title`;\r\nconst fetcher = (url) => fetch(url).then((r) => r.json());\r\n\r\nexport async function getServerSideProps(context) {\r\n\tconst data = await fetcher(FirestoreBlogPostsURL);\r\n\tconst posts = generatePosts(data);\r\n\r\n\treturn { props: { posts } };\r\n}\r\n\r\nfunction Blog(props) {\r\n\tconst initialData = props.posts;\r\n\tconst { data } = useSWR(FirestoreBlogPostsURL, fetcher, { initialData });\r\n\t// initialData is already transformed, so only transform refetches\r\n\tconst posts = data.documents ? generatePosts(data) : data;\r\n\r\n\treturn (\r\n\t\t<div>\r\n      {data &&\r\n        posts.map((post) => (\r\n          <Link\r\n            href=\"blog/[pid]\"\r\n            as={`/blog/${post.pid}`}\r\n            key={`${post.pid}`}\r\n          >\r\n            <a style={{boder: \"1px solid\"}}>\r\n              <h3>{post.title} &rarr;</h3>\r\n              <p>{post.blurb}</p>\r\n            </a>\r\n          </Link>\r\n        ))}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Blog;\r\n"]},"metadata":{},"sourceType":"module"}