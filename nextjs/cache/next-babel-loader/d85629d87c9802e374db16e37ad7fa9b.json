{"ast":null,"code":"var _jsxFileName = \"C:\\\\Desenvolvedor\\\\nextjs\\\\next-firebase-test\\\\pages\\\\blog\\\\index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport useSWR from \"swr\";\nimport Link from \"next/link\";\nimport { generatePosts } from \"../../helpers/utils\"; // Only fetch the title and blurb.\n\nconst FirestoreBlogPostsURL = `https://firestore.googleapis.com/v1/projects/${process.env.FIREBASE_PROJECT_ID}/databases/(default)/documents/posts?mask.fieldPaths=blurb&mask.fieldPaths=title`;\n\nconst fetcher = url => fetch(url).then(r => r.json());\n\nexport async function getServerSideProps(context) {\n  const data = await fetcher(FirestoreBlogPostsURL);\n  const posts = generatePosts(data);\n  return {\n    props: {\n      posts\n    }\n  };\n}\n\nfunction Blog(props) {\n  const initialData = props.posts;\n  const {\n    data\n  } = useSWR(FirestoreBlogPostsURL, fetcher, {\n    initialData\n  }); // initialData is already transformed, so only transform refetches\n\n  const posts = data.documents ? generatePosts(data) : data;\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 3\n    }\n  }, data && posts.map(post => __jsx(Link, {\n    href: \"blog/[pid]\",\n    as: `/blog/${post.pid}`,\n    key: `${post.pid}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 11\n    }\n  }, __jsx(\"a\", {\n    style: {\n      boder: \"1px solid\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }, __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 15\n    }\n  }, post.title, \" \\u2192\"), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 15\n    }\n  }, post.blurb)))));\n}\n\nexport default Blog;","map":{"version":3,"sources":["C:/Desenvolvedor/nextjs/next-firebase-test/pages/blog/index.tsx"],"names":["useSWR","Link","generatePosts","FirestoreBlogPostsURL","process","env","FIREBASE_PROJECT_ID","fetcher","url","fetch","then","r","json","getServerSideProps","context","data","posts","props","Blog","initialData","documents","map","post","pid","boder","title","blurb"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,KAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,SAASC,aAAT,QAA8B,qBAA9B,C,CAEA;;AACA,MAAMC,qBAAqB,GAAI,gDAA+CC,OAAO,CAACC,GAAR,CAAYC,mBAAoB,kFAA9G;;AACA,MAAMC,OAAO,GAAIC,GAAD,IAASC,KAAK,CAACD,GAAD,CAAL,CAAWE,IAAX,CAAiBC,CAAD,IAAOA,CAAC,CAACC,IAAF,EAAvB,CAAzB;;AAEA,OAAO,eAAeC,kBAAf,CAAkCC,OAAlC,EAA2C;AACjD,QAAMC,IAAI,GAAG,MAAMR,OAAO,CAACJ,qBAAD,CAA1B;AACA,QAAMa,KAAK,GAAGd,aAAa,CAACa,IAAD,CAA3B;AAEA,SAAO;AAAEE,IAAAA,KAAK,EAAE;AAAED,MAAAA;AAAF;AAAT,GAAP;AACA;;AAED,SAASE,IAAT,CAAcD,KAAd,EAAqB;AACpB,QAAME,WAAW,GAAGF,KAAK,CAACD,KAA1B;AACA,QAAM;AAAED,IAAAA;AAAF,MAAWf,MAAM,CAACG,qBAAD,EAAwBI,OAAxB,EAAiC;AAAEY,IAAAA;AAAF,GAAjC,CAAvB,CAFoB,CAGpB;;AACA,QAAMH,KAAK,GAAGD,IAAI,CAACK,SAAL,GAAiBlB,aAAa,CAACa,IAAD,CAA9B,GAAuCA,IAArD;AAEA,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,IAAI,IACHC,KAAK,CAACK,GAAN,CAAWC,IAAD,IACR,MAAC,IAAD;AACE,IAAA,IAAI,EAAC,YADP;AAEE,IAAA,EAAE,EAAG,SAAQA,IAAI,CAACC,GAAI,EAFxB;AAGE,IAAA,GAAG,EAAG,GAAED,IAAI,CAACC,GAAI,EAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE;AAAG,IAAA,KAAK,EAAE;AAACC,MAAAA,KAAK,EAAE;AAAR,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKF,IAAI,CAACG,KAAV,YADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIH,IAAI,CAACI,KAAT,CAFF,CALF,CADF,CAFN,CADD;AAiBA;;AAED,eAAeR,IAAf","sourcesContent":["import useSWR from \"swr\";\r\nimport Link from \"next/link\";\r\n\r\nimport { generatePosts } from \"../../helpers/utils\";\r\n\r\n// Only fetch the title and blurb.\r\nconst FirestoreBlogPostsURL = `https://firestore.googleapis.com/v1/projects/${process.env.FIREBASE_PROJECT_ID}/databases/(default)/documents/posts?mask.fieldPaths=blurb&mask.fieldPaths=title`;\r\nconst fetcher = (url) => fetch(url).then((r) => r.json());\r\n\r\nexport async function getServerSideProps(context) {\r\n\tconst data = await fetcher(FirestoreBlogPostsURL);\r\n\tconst posts = generatePosts(data);\r\n\r\n\treturn { props: { posts } };\r\n}\r\n\r\nfunction Blog(props) {\r\n\tconst initialData = props.posts;\r\n\tconst { data } = useSWR(FirestoreBlogPostsURL, fetcher, { initialData });\r\n\t// initialData is already transformed, so only transform refetches\r\n\tconst posts = data.documents ? generatePosts(data) : data;\r\n\r\n\treturn (\r\n\t\t<div>\r\n      {data &&\r\n        posts.map((post) => (\r\n          <Link\r\n            href=\"blog/[pid]\"\r\n            as={`/blog/${post.pid}`}\r\n            key={`${post.pid}`}\r\n          >\r\n            <a style={{boder: \"1px solid\"}}>\r\n              <h3>{post.title} &rarr;</h3>\r\n              <p>{post.blurb}</p>\r\n            </a>\r\n          </Link>\r\n        ))}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Blog;\r\n"]},"metadata":{},"sourceType":"module"}