{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from \"next/router\";\nimport Error from \"next/error\";\nconst FirestoreBlogPostsURL = `https://firestore.googleapis.com/v1/projects/${process.env.FIREBASE_PROJECT_ID}/databases/(default)/documents/posts`;\n\nconst fetcher = url => fetch(url).then(r => r.json());\n\nexport default function Post({\n  post\n}) {\n  const {\n    isFallback\n  } = useRouter();\n\n  if (!isFallback && !post) {\n    return __jsx(Error, {\n      statusCode: 404,\n      title: \"No Blog Post with the provided ID\"\n    });\n  }\n\n  if (isFallback) {\n    return __jsx(\"p\", null, \"Carregando...\");\n  }\n\n  return __jsx(\"div\", null, __jsx(\"h1\", null, post.title), __jsx(\"p\", null, post.blurb), __jsx(\"p\", null, post.content));\n}\nexport const getStaticPaths = async () => {\n  return {\n    paths: [],\n    fallback: true\n  };\n};\nexport const getStaticProps = async ({\n  params\n}) => {\n  try {\n    // Call an external API endpoint to get posts.\n    const post = await fetcher(`${FirestoreBlogPostsURL}/${params.pid}`); // grabs the whole document with the provided document id (in this case pid)\n    // By returning { props: posts }, the Blog component\n    // will receive `posts` as a prop at build time\n\n    return {\n      props: {\n        post: {\n          pid: params.pid,\n          title: post.fields.title.stringValue,\n          blurb: post.fields.blurb.stringValue,\n          content: post.fields.content.stringValue // html content should be sanitized before using React's dangerouslySetInnerHTML\n\n        },\n        revalidate: 10000\n      }\n    };\n  } catch (error) {\n    console.error(error);\n    return {\n      props: {}\n    };\n  }\n}; // <div dangerouslySetInnerHTML={{ __html: post.content }} />","map":null,"metadata":{},"sourceType":"module"}